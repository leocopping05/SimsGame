using Cinemachine;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class CameraController : MonoBehaviour
{
    Vector3 moveVector = Vector3.zero;
    Vector2 moveInput = Vector2.zero;
    [SerializeField] float moveSpeed = 2.5f;
    [SerializeField] float rotationSpeed = 1.0f;
    Vector3 rotation;
    float rotationAngle;
    [SerializeField] CinemachineVirtualCamera virtualCamera;
    float targetFOV;
    float zoomInput;
    [SerializeField] float minFOV = 35f;
    [SerializeField] float maxFOV = 90f;
    [SerializeField] float zoomSensitivity = 5f;

    public void OnInputCameraMove(InputAction.CallbackContext context)
    {
        moveInput = context.ReadValue<Vector2>();
    }
    public void OnInputRotateCamera(InputAction.CallbackContext context)
    {
        rotationAngle = context.ReadValue<float>();
    }

    public void OnInputZoomCamera(InputAction.CallbackContext context)
    {
        zoomInput = context.ReadValue<float>();
    }
    private void Start()
    {
        targetFOV = virtualCamera.m_Lens.FieldOfView;
    }
    void Update()
    {
        CamreraMove();
        RotateCamera();
        Zoom();
    }
    private void Zoom()
    {
        targetFOV += zoomInput * zoomSensitivity;
        targetFOV = mathf.Clamp(targetFOV, minFOV, maxFOV);
        virtualCamera.m_Lens.FieldOfView = targetFOV;
    }
    private void RotateCamera()
    {
        rotation.y = -rotationAngle * rotationSpeed * Time.deltaTime;
        transform.eulerAngle += rotation;
    }
    private void CameraMove()
    {
        moveVector += transform.right * moveInput.x + transform.foward * moveInput.y;
        transform.position = moveVector * Time.deltaTime * moveInput.x + moveSpeed;
    }


}

